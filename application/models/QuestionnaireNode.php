<?php

/**
 * Webenq_Model_QuestionnaireNode
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Webenq_Models
 * @subpackage ##SUBPACKAGE##
 * @author     Nivocer <webenq@nivocer.com>
 * @version    SVN: $Id: Builder.php,v 1.2 2011/07/12 13:39:03 bart Exp $
 */
class Webenq_Model_QuestionnaireNode extends Webenq_Model_Base_QuestionnaireNode
{
    /*
     * Save this node element
     *
     * Check the linked QuestionnaireElement: if it has changes and is used in
     * more than one QuestionnaireNode, make a copy of the object and update the
     * reference to it
     * @todo check function
     *
     */
    public function xsave(Doctrine_Connection $conn = null)
    {
        if ($this->QuestionnaireElement->isModified()) {
            if (1 < Doctrine_Query::create()
                ->select('COUNT(id)')
                ->from('Webenq_Model_QuestionnaireNode qn')
                ->where('qn.questionnaire_element_id = ?', $this->QuestionnaireElement->id)->count()) {
                $this->QuestionnaireElement = clone $this->QuestionnaireElement;
                $this->QuestionnaireElement->save($conn);
                $this->element_id = $this->QuestionnaireElement->id;
            } else {
                $this->QuestionnaireElement->save($conn);

            }
        }
        parent::save($conn);
    }

    // Reorder all Descendants
    public function reorderDescendants($data)
    {
        /**
     * save the pages, groups and questions as children of their parent
     * @todo adjust js-input to get logic array as input
     *
     * @param array $data (structured array, with all the descendants) first val is 'group'-node, second val is array with groups and questions below
     */
        foreach ($data as $key=>$val){
            if (is_array($val)){
                //first entry is parent, second is array with descendants
                $currentParentId=preg_replace("/[^\d]/", "", $val[0]);
                $currentParent=Doctrine_Core::getTable('Webenq_Model_QuestionnaireNode')->find($currentParentId);
                $currentParent->getNode()->moveAsLastChildOf($this);
                $currentParent->reorderDescendants($val[1]);
            }else {
            // no children
                //insert current val as last child of parent:
                $nodeId=preg_replace("/[^\d]/", "", $val);
                $child=Doctrine_Core::getTable('Webenq_Model_QuestionnaireNode')->find($nodeId);
                $child->getNode()->moveAsLastChildOf($this);
            }
        }

        // cases:
        // - not all children of this node were given
        // - more nodes were given
        // - given nodes were not children of this node
        //   example: drag question from one Likert table into another
    }

    // prepare the output (
    //return  Zend_Form_Element_*
    public function render($format)
    {
        switch ($format){
            case 'previewTab':
                $return='';
                if ($this->getNode()->hasChildren()){
                    foreach ($this->getNode()->getChildren() as $group){
                        $return.=$group->render($format);
                    }
                }
                return $return;
            break;
            default:
                $return=new Zend_Form_Element_Text('dummy-'.$this->id);
                $return->setLabel($this->QuestionnaireElement->getTranslation('text'));
                return $return;
            break;
        }
    }

    /*
     * untested
     */
    public function fromArray(array $array, $deep = true)
    {
        $language = Zend_Registry::get('Zend_Locale')->getLanguage();
        parent::fromArray($array, $deep);
        //set id
        if (isset($array['question']['question']['id'])) {
            $this->id=$array['question']['question']['id'];
        }
        //set language
        if (isset($array['question']['question']['text']) && is_array($array['question']['question']['text'])) {
            foreach ($array['question']['question']['text'] as $language => $text) {
                if ($text) {
                    $this->QuestionnaireElement->Translation[$language]->text = $text;
                }
            }
        }

        //set answer_domain_id to reuse-value
        if (isset($array['question']['question']['answer_domain_id']) && $array['question']['question']['answer_domain_id']<>''){
            $this->QuestionnaireElement->answer_domain_id=$array['question']['question']['answer_domain_id'];
        }

        //changes need to be stored in options, not in aswerdomain.
        if (isset($array['answers']['answers'])){
            $questionnaireElementoptions['answerDomain']=$array['answers']['answers'];
        }
        //option tab
        //$array['options'] needs to be stored in QuestionnaireElement->options except active and required
        if (isset($array['options']) && isset($array['options']['options']) ){
                $questionnaireElementoptions['options']=$array['options']['options'];
        }
        $questionnaireElementKeys=array('active','required');
        foreach ($questionnaireElementKeys as $key){
            if (isset($array['options']['options'][$key])){
                $this->QuestionnaireElement->$key=$array['options']['options'][$key];
                unset($questionnaireElementoptions['options'][$key]);
            }
        }

        //store changed name, but we don't want this i quess.
        if (isset($array['answers']['answers']['name'])){
    //        $this->QuestionnaireElement->AnswerDomain->Translation[$language]->name=$array['answerOptions']['answersettings']['name'];
        }
        //finally put all questionnaireElement options in object
        $this->QuestionnaireElement->options=$questionnaireElementoptions;

    }
    public function getQuestionnaire() {
        $questionnaire=new Webenq_Model_Questionnaire();
        return $questionnaire->getTable()->findBy('questionnaire_node_id', $this->root_id)->getFirst();
    }
    /**
     * Get page node of this question.
     *
     * @return unknown|boolean
     */
    public function getPage(){
        foreach  ($this->getNode()->getAncestors() as $questionNode) {
            if (get_class($questionNode)=='Webenq_Model_QuestionnairePageNode'){
                return $questionNode;
            }
        }
        return false;
    }

    /**
     * correct pagenumber text after ordering pages/questions (first child gets page 1)
     */
    public function correctPageNumberText(){
        $pageNumber=0;
        foreach  ($this->getNode()->getDescendants() as $questionNode) {
            if (get_class($questionNode)=='Webenq_Model_QuestionnairePageNode'){
                $pageNumber++;
                $questionNode->QuestionnaireElement->setTranslations(array('en'=>array('text'=>$pageNumber)));
                $questionNode->QuestionnaireElement->save();
            }
        }
    }

}