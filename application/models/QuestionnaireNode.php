<?php
/**
 * WebEnq4
 *
 *  LICENSE
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @package    Webenq_Models
 * @copyright  Copyright (c) 2013 Nivocer B.V. (http://www.nivocer.com)
 * @license    http://www.gnu.org/licenses/agpl.html
 */

/**
 * Webenq_Model_QuestionnaireNode
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Webenq_Models
 * @author     Nivocer <webenq@nivocer.com>
 */
class Webenq_Model_QuestionnaireNode extends Webenq_Model_Base_QuestionnaireNode
{
    /**
     * Save this node element
     *
     * Check the linked QuestionnaireElement: if it has changes and is used in
     * more than one QuestionnaireNode, make a copy of it
     */
    public function save(Doctrine_Connection $conn = null)
    {
        if ($this->QuestionnaireElement->isModified(true)) {
            if (1 < Doctrine_Query::create()
                    ->select('COUNT(id)')
                    ->from('Webenq_Model_QuestionnaireNode qn')
                    ->where('qn.questionnaire_element_id = ?', $this->QuestionnaireElement->id)
                    ->count()) {
                $this->QuestionnaireElement = $this->QuestionnaireElement->copy();
            }
        }
        parent::save($conn);
    }

    /**
     * Save the pages, groups and questions as children of their parent
     *
     * Cases:
     * <ul>
     * <li>not all children of this node were given: they become the first nodes
     * <li>more nodes were given: they are added: wanted behavior
     * <li>given nodes were not children of this node: possible wanted behavior
     * <li>example: drag question from one Likert table into another: oops (but not possible via ui)
     * <li>given nodes don't belong to this questionnaire: big oops
     * </ul>

     * @param array $data (structured array, with all the descendants) key is parent, val is array with children
     * @todo determin restrictions of the sorting
     */
    public function reorderDescendants($data)
    {
        foreach ($data as $key => $val) {
            if (is_array($val)) {
                //insert
                $currentParentId=$this->cleanId($key);
                $currentParent=Doctrine_Core::getTable('Webenq_Model_QuestionnaireNode')->find($currentParentId);
                $currentParent->getNode()->moveAsLastChildOf($this);
                $currentParent->reorderDescendants($val);
            } else {
                // current node has no children
                //insert current val as last child of parent:
                $nodeId=$this->cleanId($val);
                $child=Doctrine_Core::getTable('Webenq_Model_QuestionnaireNode')->find($nodeId);
                $child->getNode()->moveAsLastChildOf($this);
            }
        }
    }

    /**
     * remove everything but numbers from (html-)id's.
     * @param  string Id
     * @return string Numeric id
     */
    public function cleanId($input)
    {
        return preg_replace("/[^\d]/", "", $input);
    }

    // prepare the output (
    //return  Zend_Form_Element_*
    public function render($format)
    {
        switch ($format){
            case 'previewTab':
                $return='';
                if ($this->getNode()->hasChildren()){
                    foreach ($this->getNode()->getChildren() as $group){
                        $return.=$group->render($format);
                    }
                }
                return $return;
            break;
            default:
                $return=new Zend_Form_Element_Text('dummy-'.$this->id);
                $return->setLabel($this->QuestionnaireElement->getTranslation('text'));
                return $return;
            break;
        }
    }

    public function getQuestionnaire() {
        $questionnaire=new Webenq_Model_Questionnaire();
        return $questionnaire->getTable()->findBy('questionnaire_node_id', $this->root_id)->getFirst();
    }
    /**
     * Get page node of this question.
     *
     * @return unknown|boolean
     */
    public function getPage(){
        foreach  ($this->getNode()->getAncestors() as $questionNode) {
            if (get_class($questionNode)=='Webenq_Model_QuestionnairePageNode'){
                return $questionNode;
            }
        }
        return false;
    }

    /**
     * correct pagenumber text after ordering pages/questions (first child gets page 1)
     */
    public function correctPageNumberText(){
        $pageNumber=0;
        foreach  ($this->getNode()->getDescendants() as $questionNode) {
            if (get_class($questionNode)=='Webenq_Model_QuestionnairePageNode'){
                $pageNumber++;
                $questionNode->QuestionnaireElement->setTranslationFromArray(array('text'=>array('nl'=>$pageNumber)));
                $questionNode->QuestionnaireElement->save();
            }
        }
    }

}